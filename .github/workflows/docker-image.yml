name: Docker Image CI

on:
  push:
    branches: [ "main", "develop", "feature/**" ]
  pull_request:
    branches: [ "main", "develop", "feature/**" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    env:
      IMAGE_TAG: v0.0.1
      IMAGE_NAME: node-frontend
      CONTAINER_NAME: frontend-container
      CONTAINER_PORT: 3000

    steps:
    - uses: actions/checkout@v4

    - name: Set IMAGE_URI
      id: set-image-uri
      run: echo "IMAGE_URI=${{ secrets.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build the Docker image
      run: docker build . --tag ${{ env.IMAGE_URI }} || { echo 'Build failed!'; exit 1; }

    - name: Run the Docker container
      run: docker run -d --name ${{ env.CONTAINER_NAME }} -p ${{ env.CONTAINER_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.IMAGE_URI }} || { echo 'Run failed!'; exit 1; }

    - name: Health Check
      run: |
        for i in {1..10}; do
          sleep 5
          if curl --silent --fail http://localhost:${{ env.CONTAINER_PORT }}/health; then
            exit 0
          fi
          echo "Waiting for server to start..."
        done
        echo "Health check failed!"
        exit 1

    - name: Push the Docker image
      run: docker push ${{ env.IMAGE_URI }}

    - name: Cleanup
      if: always()
      run: |
        docker stop ${{ env.CONTAINER_NAME }} || echo "Container not running or already stopped."
        docker rm ${{ env.CONTAINER_NAME }} || echo "Container not found."
        dangling_images=$(docker images -f "dangling=true" -q)
        if [ -n "$dangling_images" ]; then
          docker rmi $dangling_images || echo "Failed to remove dangling images."
        else
          echo "No dangling images to remove."
        fi
